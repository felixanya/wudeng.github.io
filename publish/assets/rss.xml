<?xml version="1.0" encoding="utf8" ?>
<rss version="2.0">
<channel>
    <title>Deng的梦呓</title>
    <description>Erlang|开发|生活|感悟</description>
    <link>http://github.com/wudeng</link>

    <!-- auto complete by template replacement -->
    <item>
    <title>Beam虚拟机</title>
    <link>http://wudeng.github.io/publish/2017-07-05-beam-virtual-machine.html</link>
    <description>
<a href="publish/2017-07-05-beam-virtual-machine.html"><h1>Beam虚拟机</h1>
</a><ul>
<li><a href="#数据区">数据区</a></li>
<li><a href="#数据对象">数据对象</a></li>
<li><a href="#寄存器">寄存器</a></li>
<li><a href="#重要的指令">重要的指令</a></li>
<li><a href="#并发">并发</a></li>
<li><a href="#参考文档">参考文档</a></li>
</ul>
<p>通过-S选项可以将erl源文件编译成汇编文件。</p>
<pre><code><span class="hljs-meta">$</span><span class="bash"> erlc -S test.erl</span>
</code></pre>
<p>反编译 </p>

        <a href="http://wudeng.github.io/publish/2017-07-05-beam-virtual-machine.html">阅读全文 >> </a>
    </description>
    <pubDate>2017-7-5</pubDate>
</item>


<item>
    <title>Erlang的Selective Receive机制</title>
    <link>http://wudeng.github.io/publish/2017-06-21-selective-receive.html</link>
    <description>
<a href="publish/2017-06-21-selective-receive.html"><h1>Erlang的Selective Receive机制</h1>
</a><ul>
<li><a href="#selective-receive">Selective Receive</a></li>
<li><a href="#验证">验证</a></li>
<li><a href="#求证">求证</a></li>
<li><a href="#深入源码">深入源码</a></li>
<li><a href="#结论">结论</a></li>
<li><a href="#参考">参考</a></li>
</ul>
<h2><a name="selective-receive" class="anchor" href="#selective-receive"><span class="header-link"></span></a>Selective Receive</h2>
<p>Joe的Programming Erlang中讲到了Selective Receive的时候，提到了一个<code>save queue</code>的概念。</p>
<blockquote>
<pre><code>receive
  P<span class="hljs-function"><span class="hljs-title">attern1</span> [<span class="hljs-keyword">when</span> Guard1] -&gt;</span>
  Expressions1;
  P<span class="hljs-function"><span class="hljs-title">attern2</span> [<span class="hljs-keyword">when</span> Guard2] -&gt;</span>
  Expressions2;
  ...
after
  T<span class="hljs-function"><span class="hljs-title">ime</span> -&gt;</span>
  ExpressionsTimeout
end
</code></pre><ul>
<li>When we enter a receive statement, we start a timer (but only if an after section is present in the expression).</li>
<li>Take the first message in the mailbox and try to match it against Pattern1, Pattern2, and so on. If the match succeeds, the message is removed from the mailbox, and the expressions following the pattern are evaluated.</li>
<li>If none of the patterns in the receive statement matches the first message in the mailbox, then the first message is removed from the mailbox and put into a "<em>save queue</em>." The second message in the mailbox is then tried. This procedure is repeated until a matching message is found or until all the messages in the mailbox have been examined.</li>
<li>If none of the messages in the mailbox matches, then the process is suspended and will be rescheduled for execution the next time a new message is put in the mailbox. Note that when a new message arrives, the messages in the save queue are not rematched; only the new message is matched.</li>
<li>As soon as a message has been matched, then all messages that have been put into the save queue are reentered into the mailbox in the order in which they arrived at the process. If a timer was set, it is cleared.</li>
<li>If the timer elapses when we are waiting for a message, then evaluate the expressions ExpressionsTimeout and put any saved messages back into the mailbox in the order in which they arrived at the process.</li>
</ul>
</blockquote>

        <a href="http://wudeng.github.io/publish/2017-06-21-selective-receive.html">阅读全文 >> </a>
    </description>
    <pubDate>2017-6-21</pubDate>
</item>


<item>
    <title>基于Erlang的行为树实现</title>
    <link>http://wudeng.github.io/publish/2017-06-08-behavior-tree.html</link>
    <description>
<a href="publish/2017-06-08-behavior-tree.html"><h1>基于Erlang的行为树实现</h1>
</a><ul>
<li><a href="#什么是行为树">什么是行为树</a></li>
<li><a href="#为什么使用行为树">为什么使用行为树</a></li>
<li><a href="#组成部分">组成部分</a></li>
<li><a href="#具体实现">具体实现</a></li>
<li><a href="#参考文档">参考文档</a></li>
</ul>
<h2><a name="什么是行为树" class="anchor" href="#什么是行为树"><span class="header-link"></span></a>什么是行为树</h2>
<p>行为树，英文是Behavior Tree，简称BT，是由行为节点组成的树状结构。行为树的每个节点都会返回一个状态，成功，失败，运行，父节点根据子节点的返回值做出相应的决策。
在游戏开发中，行为树主要用来实现怪物AI的行为决策，根据条件以及环境来决定怪物执行什么样的行为，如攻击，逃跑，巡逻，休息等。</p>
<h2><a name="为什么使用行为树" class="anchor" href="#为什么使用行为树"><span class="header-link"></span></a>为什么使用行为树</h2>

        <a href="http://wudeng.github.io/publish/2017-06-08-behavior-tree.html">阅读全文 >> </a>
    </description>
    <pubDate>2017-6-8</pubDate>
</item>


</channel>
</rss>
